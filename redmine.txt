//17.07.2016
1. Refaktoring, wyciągniecie kodu dpowiedizalnego za wyciaganie danych tkstowych z pliku DICOM do klasy
   DicomTextInformationExtractor
2. Dodanie pustych klas dla extractora danych binarnych, wyrownanie testow. Usuniecie zbednego parametru w extraktorze
   do danych tekstowych.
3. Konwersja pliku DICOM na plik png.

Do zrobienia:
0. Dodac ustawianie zmiennej srodowiskowej w extractorze.
01. Dodac test modulowy na sprawdzenieu pliku png.
002. Refactor kalsy handlera, przekazywanie nazwy pliku z payloadu zamiast DIcomFIle czy jakos tak, podobnie refactor 
     extractora dla pliku teksotwego.
1. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
3. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)
4. Plik DICOM skonwertowany jest inny niz w progaie MicroDicom, zabawa kilkoma opcjami zeby rozjasnic zdjecie.

/16.07.2016
1. Wyciagniecie wybranych informacji z pliku DICOM i wysiwetlenie ich na ektanie + dwa testy komponentowe na to
2. Zapisanie wyciagnietych danych do pliku tekstowego i odesłanie nazw plikow w wiadomosciach.
3. Stworzenie testu komponentowego na prosbe o parsowanie danego pliku a pozniej zamowienie pliku teksotwego
   z wyviagnietymi informacjami.

Do zrobienia:

1. Dodanie mozliwosci konwersji z DICOM na png czy tiff.
2. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
3. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)
4. Plik DICOM skonwertowany jest inny niz w progaie MicroDicom, zabawa kilkoma opcjami zeby rozjasnic zdjecie.

//14.07.2016
1. Wpięcie biblioteki DICOM w projekt (Makefile wszsytkie)

Do zrobienia:
1. Wyciagniecie kilku wybranych informacji z pliku DICOM i zapisanie ich do pliku tekstowego.
2. Dodanie mozliwosci konwersji z DICOM na png czy tiff.
3. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
4. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)
5. Plik DICOM skonwertowany jest inny niz w progaie MicroDicom, zabawa kilkoma opcjami zeby rozjasnic zdjecie.

//13.07.2016
1. Dodanie handlera dla wiadomosci SERVER_PARSE_DICOM_FILE_REQ
2. Sciagniecie i budowa biblioteki dcmtk
3. Podgladniecie dzialania programu z sciezka wykonania do konwersji pliku DICOM na jpeg, png, tiff, bmp.

Do zrobienia:
1. Wpięcie biblioteki DICOM w projekt (Makefile)
2. Wyciagniecie kilku wybranych informacji z pliku DICOM i zapisanie ich do pliku tekstowego.
3. Dodanie mozliwosci konwersji z DICOM na png czy tiff.
4. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
5. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)
6. Plik DICOM skonwertowany jest inny niz w progaie MicroDicom, zabawa kilkoma opcjami zeby rozjasnic zdjecie.

//09.05.2016
Zrobione:
1. Wpiecie konwertera z punktu 1 do UnixWrapera do metody recv i send
    * rozwiazanie prolemow z przesylanie
    * ilosc bajtow detrminowana na podstawie sizeof RawMessage
    * zamizast strcpy uzycie memcpy ze wzgledu na kopiowanie danych binarncyh
    * zmniejszenie mozliwego rozmiary bytes in payload do 1024 - wiecej nie ma sensu

Do zrobienia:
1. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
2. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)

//09.05.2016
Zrobione:
1. Stworzenie konwertera z wiadomosci Message na RawMessage i odwrotnie
a) UT dla numOfmessages i bytesInPayload i calosci

Do zrobienia:
1. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
2. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)
4. Wpiecie konwertera z punktu 1 do UnixWrapera do metody recv i send

//08.05.2016
Zrobione:
0. Połaczenie z klienta na serwer!
1. Stowrzenie formatu wiadomosci przejsciowej RawMessage w celu uzyskania zgodniosci z aplikacja w Java'ie
2. Stworzenie konwertera z wiadomosci Message na RawMessage i odwrotnie
a) dodanie pustych klas + pustej test sutiy
b) znalazenie sposobu na konwertowanie, wynalezienie "klockow" na zasadzie ktorych mial dzialac konwerter
    * boost lexical cast po stronie wysylania C++
    * boost lexical cast po stronie odbierania C++
    * konwersja odczytanej tablicy char na String i Integer.parseInt() z biblioteki Java'y (plik Test1.java)
c) imlementacja UT dla konwersji z Message na RawMessage
d) implementacja dla konwersji z RawMessage na Messaga + UT dla msgId

Do zrobienia:
1. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczyoraz UT
2. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)
3. Stworzenie konwertera z wiadomosci Message na RawMessage i odwrotnie
a) UT dla numOfmessages i bytesInPayload i calosci
4. Wpiecie konwertera z punktu 3 do UnixWrapera do metody recv i send

//08.04.2016
Zrobione:
1. Stworzyc test modulowy do funkcjonalnosci przesylania listy plikow na serwerze
   * dopisac test modulowy kiedy pytamy o liste plikow, otrzymujemy, nastepenie wybieramy
     plik z listy i wysylamy request o niego i odbieramy ten plik
2. W testach UT do Handlera wywalic l_onlyToMakeWork_toRemoveInFuture;

Do zrobienia:
1. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
2. Obsluga sytuacji brzegowyvch:
-> zerwanie połaczenia w trakcie trnsmisji przez klienta
-> request pliku ktorego nie ma
-> wiadomosc nie przychodzi dlugi czas ( kiedy zamykac polaczenia, timery?)

//07.04.2016
Zrobione:
1. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze
   * dopisac implemetacje dla klasy handlera
2. Dodanie execute command do UnixWrappers
3. Test modulowy dla funkconalnosci o przeslanie listy plikow

Do zrobienia:
1. W testach do Handlera wywalic l_onlyToMakeWork_toRemoveInFuture;
2. Stworzyc test modulowy do funkcjonalnosci przesylania listy plikow na serwerze
   * dopisac test modulowy kiedy pytamy o liste plikow, otrzymujemy, nastepenie wybieramy
     plik z listy i wysylamy request o niego i odbieramy ten plik
3. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
4. System logowania zarowno dla testow modulowych jak i dla serwera.
5. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//06.04.2016
Zrobione:
1. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass
    * rozwiazaniem okazalo sie MSG_WAIT_ALL przy receive, takze tak czy siak problem lezal po stronie modul
      testow
2. Dodanie handlera dla requesta o przeslanie listy plikow
   * pusta implementacja samej kalsy
   * wpiecie w dispatchera i dopisanie UT

Do zrobienia:
1. W testach do Handlera wywalic l_onlyToMakeWork_toRemoveInFuture;
2. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego
   * dopisac implemetacje dla klasy handlera
   * dopisac test modulowy
3. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
4. System logowania zarowno dla testow modulowych jak i dla serwera.
5. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//28.03.2016
Zrobione:
1. Mock dla klasy Handlera do przesylania plikow.
2. Wrzucic do Dispatchera uzycie klasy Handlera do plikow + napisac UT dla tego przypadku.

Do zrobienia:
1. W testach do Handlera wywalic l_onlyToMakeWork_toRemoveInFuture;
2. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
3. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
4. System logowania zarowno dla testow modulowych jak i dla serwera.
5. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.
6. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass

//25.03.2016
Zrobione:
1. Stworzyc UT do klasy Handlera dla:
   * handle

Do zrobienia:
1. W testach do Handlera wywalic l_onlyToMakeWork_toRemoveInFuture;
2. Mock dla klasy Handlera do przesylania plikow.
3. Wrzucic do Dispatchera uzycie klasy Handlera do plikow + napisac UT dla tego przypadku.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
5. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
6. System logowania zarowno dla testow modulowych jak i dla serwera.
7. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.
8. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass

//24.03.2016
Zrobione:
1. Stworzyc UT do klasy Handlera dla:
   * sendRequestedFile
2. Mock dla klasy StreamWrappera

Do zrobienia:
0. Mock dla klasy Handlera do przesylania plikow.
1. Wrzucic do Dispatchera uzycie klasy Handlera do plikow + napisac UT dla tego przypadku.
2. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
3. Stworzyc UT do klasy Handlera dla:
   * handle
4. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
5. System logowania zarowno dla testow modulowych jak i dla serwera.
6. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.
7. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass

//22.03.2016
Zrobione:
1. Dodanie klasy StreamWrapper
2. Wpiecie klasy StreamWapper do Handlera dla otryzmywania plikow oraz wyrowannie testow
3. Maly refactor klasy file request handlera

Do zrobienia:
0. Mock dla klasy Handlera do przesylania plikow.
1. Wrzucic do Dispatchera uzycie klasy Handlera do plikow + napisac UT dla tego przypadku.
2. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
3. Stworzyc UT do klasy Handlera dla:
   * sendRequestedFile
   * handle
4. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
5. System logowania zarowno dla testow modulowych jak i dla serwera.
6. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.
7. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass

//20.03.2016
Zrobione:
1. Zmiana w funkcjach recv i send typu z void* na Message*
2. Stowrozne UT klasy Handlera sendSeverSendFileResp i sendClientSendFileInd
3. Poprawione UT z kalsy UnixWrappera - nie testowały typu wiadomosci Message

Do zrobienia:
0. Mock dla klasy Handlera do przesylania plikow.
1. Wrzucic do Dispatchera uzycie klasy Handlera do plikow + napisac UT dla tego przypadku.
2. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
3. Stworzyc UT do klasy Handlera dla:
   * sendRequestedFile
   * handle
4. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
5. System logowania zarowno dla testow modulowych jak i dla serwera.
6. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.
7. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass

//19.03.2016
Zrobione:
1. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
2. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
3. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
4. Test modulowy na przesylanie jakeigos pliku obojetnie jakiego o rozmiarze takim ze po petli w sendRequestedFile
    nie powinno sie wysylac kolejnej wiadomosci, wydaje sie ze przed wysalniem tej wiaodmosci powionno sie sprawdzac
    l_byteCounter i jesli jest rozny od zera to wysylac. (przypadek brzegowy)
5. Sprawdzic licznik logowania wiadomisci, chyba numerowane jest od 0 zamiast od 1.
6. Sprawdzic przesylanie na roznych hostach.
7. Klasa Handlera dla Requestu o przelsanie pliku.
8. Wyrownanie padajacych UT w klasie Dispatcher

Do zrobienia:
0. Mock dla klasy Handlera do przesylania plikow.
1. Wrzucic do Dispatchera uzycie kklasy Handlera do plikow + napisac UT dla tego przypadku.
2. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
3. Stworzyc UT do kalsy Handlera dla Requestu o przeslanie pliku
4. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
5. System logowania zarowno dla testow modulowych jak i dla serwera.
6. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.
7. Testy modulowe z przesylaniem szczegolnie wiekszych plikow czesto failuja.
    * na tym samym hoscie faile zdarzaja sie czesta
    * na roznych hostach czesciej pojawia sie fail niz pass

//18.03.2016
Zrobione:
1. Dodanie sposobu na wyswietlanie testow w przejrzysty sposob.
2. Z maina modul testow wydzielic funkcjie do odpalania cloasci i pojedynczego testu.
3. Dodanie w testach modulowych sprawdzania czy plik otrzymany jest taki sam jak wysalny.
4. Dodanie do testu sprawdzania czy odebrany plik jest taki sam jak wysalny (polecenie diff)?
5. Refactor testow do przesylania plikow.

Do zrobienia:
1. W funkcji sendRequestedFile zamiast Message, towrzyc tablice o rozmiarze payload i przekazywac do funkcji
   sendClient*Ind wskaznik na te tablice.
2. Sprawdzic licznik logowania wiadomisci, chyba numerowane jest od 0 zamiast od 1.
3. Test modulowy na przesylanie jakeigos pliku obojetnie jakiego o rozmiarze takim ze po petli w sendRequestedFile
    nie powinno sie wysylac kolejnej wiadomosci, wydaje sie ze przed wysalniem tej wiaodmosci powionno sie sprawdzac
    l_byteCounter i jesli jest rozny od zera to wysylac. (przypadek brzegowy)
4. Dopisac UT (wyrownac padajace) do klsy Dispatcher
6. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
7. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
8. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
10. Klasa Handlera dla Requestu o przelsanie pliku.
11. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
12. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
13. System logowania zarowno dla testow modulowych jak i dla serwera.
14. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//17.03.2016
Zrobione:
1. Refactor klasy dispatcher
2. Dodanie do testow modulowych mozliwosci odpalania pojedynczego testu.

Do zrobienia:
000. W funkcji sendRequestedFile zamiast Message, towrzyc tablice o rozmiarze payload i przekazywac do funkcji sendClient*Ind wskaznik na te tablice.
000. SPrawdzic licznik logowania wiadomisci, chyba numerowane jest od 0 zamiast od 1.
000. Test modulowy na przesylanie jakeigos pliku obojetnie jakiego o rozmiarze takim ze po petli w sendRequestedFile nie powinno sie wysylac kolejnej wiadomosci,
     wydaje sie ze przed wysalniem tej wiaodmosci powionno sie sprawdzac l_byteCounter i jesli jest rozny od zera to wysylac. (przypadek brzegowy)
000. Z maina modul testow wydzielic funkcjie do odpalania cloasci i pojedynczego testu.

0. Dodanie sposobu na wyswietlanie testow w przejrzysty sposob.
0. Dopisac UT (wyrownac padajace) do klsy Dispatcher
1. Refactor testow do przesylania plikow.
2. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
3. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
5. Dodanie do testu sprawdzania czy odebrany plik jest taki sam jak wysalny (polecenie diff)?
6. Klasa Handlera dla Requestu o przelsanie pliku.
7. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
8. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
9. System logowania zarowno dla testow modulowych jak i dla serwera.
10. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//06.03.2016 oraz 07.03.2016
Zrobione:
1. Ukonczenie klasy Server
    - Dodanie mozliwosci przesylania plikow, zarowno tekstowych jak i binarnych
2. Test modułowy na przesłanie pojedynczego pliku tekstowego.
3. Obsługa wiadomosci Message poprzez odczytywanie calej struktury z funkcji receive.
4. Dodanie do Message pol wykorzystywanych przy przesylaniu plikow, rozmiar bierzacego payloadu i ilosc msg wymaganych
   przeslania pliku.
5. Proby przesylania duzych plikow tekstowych i binarnych (jpeg) zakonczone sukcesem.
6. Dodanc oddzielny msg id dla przesylania kolejnych partii plikow indication lub cos w ten desen.


Do zrobienia:
0. Dodanie do testow modulowych mozliwosci odpalania pojedynczego testu.
0. Dodanie sposobu na wyswietlanie testow w przejrzysty sposob.
0. Dopisac UT (wyrownac padajace) do klsy Dispatcher
1. Refactor testow do przesylania plikow.
2. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
3. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
5. Dodanie do testu sprawdzania czy odebrany plik jest taki sam jak wysalny (polecenie diff)?
6. Klasa Handlera dla Requestu o przelsanie pliku.
7. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
8. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
9. System logowania zarowno dla testow modulowych jak i dla serwera.
10. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//03.03.2016
Zrobione:
1. Dodano funkcje ntop, pton nie jest potrzebna, poza tym nie ma w ksiazce
2. Usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Usuniecie zbednych zmiennych i debugow z serwera
4. Serwer jest glowna klasa programu, nie potrzebuje do niego UT, funkcjonalnosc sprawdzam modul testami.

Do zrobienia:
1. Ukonczenie klasy Server
    - Dodanie mozliwosci przesylania plikow, zarowno tekstowych jak i binarnych
2. Test modułowy na przesłanie pojedynczego pliku tekstowego.
3. Test modułowy na przesłanie pojedynczego pliku binarnego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.

//02.03.2016
Zrobine:
1. Reorganizacja moduł testow
    * podzial na pliki z testcasami, naglowek i plik z funkcjami
    * stworzenie konwencji testow modulowych
    * sposob na wywolywanie wielu tesotw poprzez tablice wskaznikow na funkcje
    * prosty test z odebraniem powitania z serwera
    * stary test dostosowany do nowej konwencji

Do zrobienia:
1. Ukonczenie klasy Server
    - Testy jednostkowe dla klasy serwer
    - Dodanie mozliwosci przesylania plikow
2. Funkcje ntop i pton w wersji socket z ksiazki, duzo bardizej urposzczone wywolania
    - usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego

//01.03.2016
Zrobione:
1. Dopisac Wrapper do funkcji getpid
    - usunac z klasy Server i Dispatcher niepotrzebne juz importy
2. Mock dla klasy UnixWrapper
3. Testy jednostokowe dla klasy Dispatcher
4. Dodanie enuma zamiast int do defininicji struktury Message
5. Dodanie powitania zaraz po polaczeniu.
6. Maly refactor testu komponentowego.

Do zrobienia:
1. Ukonczenie klasy Server
    - Testy jednostkowe dla klasy serwer
    - Dodanie mozliwosci przesylania plikow
2. Funkcje ntop i pton w wersji socket z ksiazki, duzo bardizej urposzczone wywolania
    - usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Rozwiazanie problemu z procesami zombie
4. Ukonczyc jeden test modulowy dla wymiany kilku wiadomosci
    - wymyslic sensowne wywolania wiadomosci tzn cos co sie przyda pozniej
      w praktyce a nie bedize tylko na potrzeby testow, na przyklad przeslanie listy plikow

//21.02.2016
Zrobione:
1. Draft klasy serwer
2. Rozplanowany sposob handlingu wiadomosci
3. Ustalony typ wiadomosci jak bedzie wygaldac
4. Draft dla testow modulowych
5. Dopisac strukture dla wiadomosci
6. Przeniesienie handlowania msg do dispatchera.
7. Poprawianie logowania - dodanie numeru PID.

Do zrobienia:
1. Ukonczenie klasy Server
    - dodanie powitania zaraz polaczeniu
    - Testy jednostkowe dla klasy serwer
    - Dodanie mozliwosci przesylania plikow
2. Funkcje ntop i pton w wersji socket z ksiazki, duzo bardizej urposzczone wywolania
    - usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Rozwiazanie problemu z procesami zombie
4. Ukonczyc jeden test modulowy dla wymiany kilku wiadomosci
    - wymyslic sensowne wywolania wiadomosci tzn cos co sie przyda pozniej
      w praktyce a nie bedize tylko na potrzeby testow, na przyklad przeslanie listy plikow
5. Dopisac Wrapper do funkcji getpid
    - usunac z klasy Server i Dispatcher niepotrzebne juz importy
6. Testy jednostokowe dla klasy Dispatcher
7. Dodanie enuma zamiast int do defininicji struktury Message

//16.02.2016
Zrobione:
Implementacja oraz testy jednostkowe dla klasy UnixWrappers

Do zrobienia:
1. Stworzenie klasy Serwer
2. Rozwiazanie problemu z procesami zombie.

//15.02.2016
Zrobione:
Dopisanie brakujacych UT z klasy NetowrkWrappers
Stowrzenie klasy unixwrappers, pusta klasa i testSuita + uzupelnienie Makefile'i

Do zrobienia:
1. stowrzenie klasy unixwrappers //wip zostalo dopisac metody + UT
2. Stworzenie klasy Serwer
3. Rozwiazanie problemu z procesami zombie.

//14.02.2016
Zrobione:
Instalacja systemu fedora 18 oraz QT creatora, z gitem na starym komuterze Asi
Checkout projektu i zaladowanie do Qt creatora
Dodanie do repozytorium zaleznego repozytorium z testami google

Do zrobienia:
1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer
wip. Rozwiazanie problemu z procesami zombie.

//13.02.2016
Zrobione:
tagi vim

Do zrobienia:
1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer
wip. Rozwiazanie problemu z procesami zombie.

//09.02.2016
Zrobione:
Make, manual - wydrukowany w calosci
Makefile dla programu gotowy
Makefile dla testow
wip. Tagi vim.

Do zrobienia:
1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer
wip. Rozwiazanie problemu z procesami zombie.

//02.01.2016
wip. Rozwiazanie problemu z procesami zombie.
wip. Tagi vim.
wip. Makefile.

1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer

//starsze
1. Zmienna errno, co przehcowuje czy daje cos wypisywanie jej w ErrorHandler'rze? //zrobione
2. Rozwiazanie problemu z procesami zombie.
3. Tagi vim.
4. Makefile. //czesciowo wydrukowany manula - brak papieru
5. Testy googleTest. //zrobione
