//18.03.2016
Zrobione:
1. Dodanie sposobu na wyswietlanie testow w przejrzysty sposob.
2. Z maina modul testow wydzielic funkcjie do odpalania cloasci i pojedynczego testu.

Do zrobienia:
000. W funkcji sendRequestedFile zamiast Message, towrzyc tablice o rozmiarze payload i przekazywac do funkcji sendClient*Ind wskaznik na te tablice.
000. SPrawdzic licznik logowania wiadomisci, chyba numerowane jest od 0 zamiast od 1.
000. Test modulowy na przesylanie jakeigos pliku obojetnie jakiego o rozmiarze takim ze po petli w sendRequestedFile nie powinno sie wysylac kolejnej wiadomosci,
     wydaje sie ze przed wysalniem tej wiaodmosci powionno sie sprawdzac l_byteCounter i jesli jest rozny od zera to wysylac. (przypadek brzegowy)

0. Dopisac UT (wyrownac padajace) do klsy Dispatcher
1. Refactor testow do przesylania plikow.
2. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
3. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
5. Dodanie do testu sprawdzania czy odebrany plik jest taki sam jak wysalny (polecenie diff)?
6. Klasa Handlera dla Requestu o przelsanie pliku.
7. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
8. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
9. System logowania zarowno dla testow modulowych jak i dla serwera.
10. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//17.03.2016
Zrobione:
1. Refactor klasy dispatcher
2. Dodanie do testow modulowych mozliwosci odpalania pojedynczego testu.

Do zrobienia:
000. W funkcji sendRequestedFile zamiast Message, towrzyc tablice o rozmiarze payload i przekazywac do funkcji sendClient*Ind wskaznik na te tablice.
000. SPrawdzic licznik logowania wiadomisci, chyba numerowane jest od 0 zamiast od 1.
000. Test modulowy na przesylanie jakeigos pliku obojetnie jakiego o rozmiarze takim ze po petli w sendRequestedFile nie powinno sie wysylac kolejnej wiadomosci,
     wydaje sie ze przed wysalniem tej wiaodmosci powionno sie sprawdzac l_byteCounter i jesli jest rozny od zera to wysylac. (przypadek brzegowy)
000. Z maina modul testow wydzielic funkcjie do odpalania cloasci i pojedynczego testu.

0. Dodanie sposobu na wyswietlanie testow w przejrzysty sposob.
0. Dopisac UT (wyrownac padajace) do klsy Dispatcher
1. Refactor testow do przesylania plikow.
2. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
3. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
5. Dodanie do testu sprawdzania czy odebrany plik jest taki sam jak wysalny (polecenie diff)?
6. Klasa Handlera dla Requestu o przelsanie pliku.
7. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
8. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
9. System logowania zarowno dla testow modulowych jak i dla serwera.
10. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//06.03.2016 oraz 07.03.2016
Zrobione:
1. Ukonczenie klasy Server
    - Dodanie mozliwosci przesylania plikow, zarowno tekstowych jak i binarnych
2. Test modułowy na przesłanie pojedynczego pliku tekstowego.
3. Obsługa wiadomosci Message poprzez odczytywanie calej struktury z funkcji receive.
4. Dodanie do Message pol wykorzystywanych przy przesylaniu plikow, rozmiar bierzacego payloadu i ilosc msg wymaganych
   przeslania pliku.
5. Proby przesylania duzych plikow tekstowych i binarnych (jpeg) zakonczone sukcesem.
6. Dodanc oddzielny msg id dla przesylania kolejnych partii plikow indication lub cos w ten desen.


Do zrobienia:
0. Dodanie do testow modulowych mozliwosci odpalania pojedynczego testu.
0. Dodanie sposobu na wyswietlanie testow w przejrzysty sposob.
0. Dopisac UT (wyrownac padajace) do klsy Dispatcher
1. Refactor testow do przesylania plikow.
2. Test modułowy na przesłanie pojedynczego pliku binarnego duzego oraz malego.
3. Test modulowy do przesylania pojedynczego pliku tesktowego malego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.
5. Dodanie do testu sprawdzania czy odebrany plik jest taki sam jak wysalny (polecenie diff)?
6. Klasa Handlera dla Requestu o przelsanie pliku.
7. Test modulowy na przesylanie plikow DICOM. Proba odczytu pliku po przeslaniu. (W windows jakis program do dicom)
8. Rozparsowanie pliku DICOM.
    * podgladnac jak robi to jakis darmowy parser
    * konwersja DICOM do JPEG
    * przygotowanie wlasnej wersji parsera z wykorzystraniem biblioteki od dr Turczy
9. System logowania zarowno dla testow modulowych jak i dla serwera.
10. Przemyslec co by sie dzialo w sytuacjach brzegowych tzn wiadomosc nie przychodzi, przychodzi zla itd.

//03.03.2016
Zrobione:
1. Dodano funkcje ntop, pton nie jest potrzebna, poza tym nie ma w ksiazce
2. Usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Usuniecie zbednych zmiennych i debugow z serwera
4. Serwer jest glowna klasa programu, nie potrzebuje do niego UT, funkcjonalnosc sprawdzam modul testami.

Do zrobienia:
1. Ukonczenie klasy Server
    - Dodanie mozliwosci przesylania plikow, zarowno tekstowych jak i binarnych
2. Test modułowy na przesłanie pojedynczego pliku tekstowego.
3. Test modułowy na przesłanie pojedynczego pliku binarnego.
4. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego.

//02.03.2016
Zrobine:
1. Reorganizacja moduł testow
    * podzial na pliki z testcasami, naglowek i plik z funkcjami
    * stworzenie konwencji testow modulowych
    * sposob na wywolywanie wielu tesotw poprzez tablice wskaznikow na funkcje
    * prosty test z odebraniem powitania z serwera
    * stary test dostosowany do nowej konwencji

Do zrobienia:
1. Ukonczenie klasy Server
    - Testy jednostkowe dla klasy serwer
    - Dodanie mozliwosci przesylania plikow
2. Funkcje ntop i pton w wersji socket z ksiazki, duzo bardizej urposzczone wywolania
    - usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Stworzyc funkcjonalnosc przesylania listy plikow na serwerze plus test modulowy do tego

//01.03.2016
Zrobione:
1. Dopisac Wrapper do funkcji getpid
    - usunac z klasy Server i Dispatcher niepotrzebne juz importy
2. Mock dla klasy UnixWrapper
3. Testy jednostokowe dla klasy Dispatcher
4. Dodanie enuma zamiast int do defininicji struktury Message
5. Dodanie powitania zaraz po polaczeniu.
6. Maly refactor testu komponentowego.

Do zrobienia:
1. Ukonczenie klasy Server
    - Testy jednostkowe dla klasy serwer
    - Dodanie mozliwosci przesylania plikow
2. Funkcje ntop i pton w wersji socket z ksiazki, duzo bardizej urposzczone wywolania
    - usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Rozwiazanie problemu z procesami zombie
4. Ukonczyc jeden test modulowy dla wymiany kilku wiadomosci
    - wymyslic sensowne wywolania wiadomosci tzn cos co sie przyda pozniej
      w praktyce a nie bedize tylko na potrzeby testow, na przyklad przeslanie listy plikow

//21.02.2016
Zrobione:
1. Draft klasy serwer
2. Rozplanowany sposob handlingu wiadomosci
3. Ustalony typ wiadomosci jak bedzie wygaldac
4. Draft dla testow modulowych
5. Dopisac strukture dla wiadomosci
6. Przeniesienie handlowania msg do dispatchera.
7. Poprawianie logowania - dodanie numeru PID.

Do zrobienia:
1. Ukonczenie klasy Server
    - dodanie powitania zaraz polaczeniu
    - Testy jednostkowe dla klasy serwer
    - Dodanie mozliwosci przesylania plikow
2. Funkcje ntop i pton w wersji socket z ksiazki, duzo bardizej urposzczone wywolania
    - usuniecie dotychczasowego wywolania + wywalnie zmiennej gowno
3. Rozwiazanie problemu z procesami zombie
4. Ukonczyc jeden test modulowy dla wymiany kilku wiadomosci
    - wymyslic sensowne wywolania wiadomosci tzn cos co sie przyda pozniej
      w praktyce a nie bedize tylko na potrzeby testow, na przyklad przeslanie listy plikow
5. Dopisac Wrapper do funkcji getpid
    - usunac z klasy Server i Dispatcher niepotrzebne juz importy
6. Testy jednostokowe dla klasy Dispatcher
7. Dodanie enuma zamiast int do defininicji struktury Message

//16.02.2016
Zrobione:
Implementacja oraz testy jednostkowe dla klasy UnixWrappers

Do zrobienia:
1. Stworzenie klasy Serwer
2. Rozwiazanie problemu z procesami zombie.

//15.02.2016
Zrobione:
Dopisanie brakujacych UT z klasy NetowrkWrappers
Stowrzenie klasy unixwrappers, pusta klasa i testSuita + uzupelnienie Makefile'i

Do zrobienia:
1. stowrzenie klasy unixwrappers //wip zostalo dopisac metody + UT
2. Stworzenie klasy Serwer
3. Rozwiazanie problemu z procesami zombie.

//14.02.2016
Zrobione:
Instalacja systemu fedora 18 oraz QT creatora, z gitem na starym komuterze Asi
Checkout projektu i zaladowanie do Qt creatora
Dodanie do repozytorium zaleznego repozytorium z testami google

Do zrobienia:
1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer
wip. Rozwiazanie problemu z procesami zombie.

//13.02.2016
Zrobione:
tagi vim

Do zrobienia:
1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer
wip. Rozwiazanie problemu z procesami zombie.

//09.02.2016
Zrobione:
Make, manual - wydrukowany w calosci
Makefile dla programu gotowy
Makefile dla testow
wip. Tagi vim.

Do zrobienia:
1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer
wip. Rozwiazanie problemu z procesami zombie.

//02.01.2016
wip. Rozwiazanie problemu z procesami zombie.
wip. Tagi vim.
wip. Makefile.

1. Dopisanie brakujacych UT z klasy NetowrkWrappers
2. Stowrzenie klasy UnixWrappers
3. Stworzenie klasy Serwer

//starsze
1. Zmienna errno, co przehcowuje czy daje cos wypisywanie jej w ErrorHandler'rze? //zrobione
2. Rozwiazanie problemu z procesami zombie.
3. Tagi vim.
4. Makefile. //czesciowo wydrukowany manula - brak papieru
5. Testy googleTest. //zrobione
