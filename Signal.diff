diff --git a/chapter5/client.cpp b/chapter5/client.cpp
index 953bb40..6d9b9ae 100644
--- a/chapter5/client.cpp
+++ b/chapter5/client.cpp
@@ -11,6 +11,7 @@ void Connect(int fd, const struct sockaddr *sa, socklen_t salen);
 void Inet_pton(int family, const char *strptr, void *addrptr);
 void str_cli(FILE *fp, int sockfd);
 void err_quit(const char *fmt, ...);
+void err_sys(const char *fmt, ...);
 
 int main(int argc, char **argv)
 {
@@ -18,7 +19,10 @@ int main(int argc, char **argv)
     sockaddr_in servaddr;
 
     if (argc != 2)
-        err_quit("usage: tcpli <IPaddress>");
+    {
+        printf("kurwa mac\n");
+        err_sys("usage: tcpli <IPaddress>");
+    }
 
     sockfd = Socket(AF_INET, SOCK_STREAM, 0);
 
diff --git a/chapter5/program b/chapter5/program
index f0c30ca..c188f1b 100755
Binary files a/chapter5/program and b/chapter5/program differ
diff --git a/chapter5/programC b/chapter5/programC
deleted file mode 100755
index 2968177..0000000
Binary files a/chapter5/programC and /dev/null differ
diff --git a/chapter5/server.cpp b/chapter5/server.cpp
index cdbff5f..2f62e40 100644
--- a/chapter5/server.cpp
+++ b/chapter5/server.cpp
@@ -3,6 +3,8 @@
 #include <string.h>
 #include <stdlib.h>
 
+#include <signal.h>
+
 #define LISTENQ 1024 /* 2nd argument to listen() */
 #define SERV_PORT 9877 /* TCP and UDP */
 
@@ -12,6 +14,9 @@ void Listen(int fd, int backlog);
 int Accept(int fd, struct sockaddr *sa, socklen_t *salenptr);
 pid_t Fork(void);
 void Close(int fd);
+typedef void Sigfunc(int); /* for signal handlers */
+void sig_child(int signo);
+Sigfunc * Signal(int signo, Sigfunc *func);
 
 void str_echo(int sockFd);
 
@@ -32,6 +37,9 @@ int main(int argc, char** argv)
     Bind(listenFd, (sockaddr*) &servAddr, sizeof(servAddr));
 
     Listen(listenFd, LISTENQ);
+   
+    //to prevent zombie processes after termination connection with certain child (closing fork() )
+    Signal(SIGCHLD, sig_child); 
 
     for(;;)
     {
diff --git a/chapter5/wrappers.cpp b/chapter5/wrappers.cpp
index 45fc963..a3a0270 100644
--- a/chapter5/wrappers.cpp
+++ b/chapter5/wrappers.cpp
@@ -10,6 +10,11 @@
 #include <unistd.h>
 #include <arpa/inet.h>
 
+#include <signal.h>
+#include <sys/wait.h>
+
+#include <libexplain/kill.h>
+
 #define MAXLINE 4096 /* max text line length */
 
 void err_sys(const char *fmt, ...);
@@ -194,13 +199,16 @@ again:
     if ( (n = accept(fd, sa, salenptr)) < 0)
     {
 #ifdef EPROTO
-    if (errno == EPROTO || errno == ECONNABORTED)
+        if (errno == EPROTO || errno == ECONNABORTED)
 #else
-    if (errno == ECONNABORTED)
+        if (errno == ECONNABORTED)
 #endif
-        goto again;
-    else
-        err_sys("accept error");
+            goto again;
+        else
+        {
+            printf("kurwa mac\n");
+            err_sys("accept error");
+        }
     }
     return(n);
 }
@@ -265,7 +273,9 @@ static void err_doit(int errnoflag, int level, const char *fmt, va_list ap)
     vsprintf(buf, fmt, ap);
 #endif
     n = strlen(buf);
-
+    
+    vsprintf(buf, fmt, ap);
+    vsnprintf(buf, MAXLINE, fmt, ap);
     if(errnoflag)
         snprintf(buf + n, MAXLINE - n, ": %s", strerror(errno_save));
     strcat(buf, "\n");
@@ -309,3 +319,58 @@ void err_quit(const char *fmt, ...)
     va_end(ap);
     exit(1);
 }
+
+//Signals
+
+void sig_child(int signo)
+{
+    pid_t pid;
+    int stat;
+    int result;
+    //pid = wait(&stat);
+    while ((pid = waitpid(-1, &stat, WNOHANG)) > 0)
+    {
+        result = kill(pid, SIGKILL);  
+        printf( "%s\n", explain_kill(pid, SIGKILL)); 
+        printf("child %d terminated. Kill result: %d\n", pid, result);
+    }
+    return;
+}
+
+typedef void Sigfunc(int); /* for signal handlers */
+
+Sigfunc * signal(int signo, Sigfunc *func)
+{
+    struct sigaction act, oact;
+
+    act.sa_handler = func;
+    sigemptyset(&act.sa_mask);
+    act.sa_flags = 0;
+
+    if (signo == SIGALRM) 
+    {
+#ifdef  SA_INTERRUPT
+        act.sa_flags |= SA_INTERRUPT;   /* SunOS 4.x */
+#endif
+    }
+    else
+    {
+#ifdef  SA_RESTART
+        act.sa_flags |= SA_RESTART;     /* SVR4, 44BSD */
+#endif
+    }
+
+    if (sigaction(signo, &act, &oact) < 0)
+        return(SIG_ERR);
+
+    return(oact.sa_handler);
+}
+
+Sigfunc * Signal(int signo, Sigfunc *func)    /* for our signal() function */
+{
+    Sigfunc *sigfunc;
+
+    if ((sigfunc = signal(signo, func)) == SIG_ERR)
+        err_sys("signal error");
+    return(sigfunc);
+}
